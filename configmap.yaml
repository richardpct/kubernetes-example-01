---
kind: ConfigMap
apiVersion: v1
metadata:
  name: init-script
data:
  count.sh: |
    #!/bin/bash

    set -e

    pip install redis
    /var/lib/www/count
  reset.sh: |
    #!/bin/bash

    set -e

    pip install redis
    /var/lib/www/reset
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: count-script
data:
  count.py: |
    #!/usr/bin/env python3

    from http.server import BaseHTTPRequestHandler, HTTPServer
    import redis

    serverPort = 80
    r = redis.Redis( host='redis-0.redis', port=6379)

    class MyServer(BaseHTTPRequestHandler):
        def do_GET(self):
            count = r.incr('count')
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(bytes("<html><head><title>Requests counter</title></head>", "utf-8"))
            self.wfile.write(bytes("<p>Request: %s</p>" % self.path, "utf-8"))
            self.wfile.write(bytes("<p>Request: %s</p>" % count, "utf-8"))
            self.wfile.write(bytes("<body>", "utf-8"))
            self.wfile.write(bytes("</body></html>", "utf-8"))

    if __name__ == "__main__":
        webServer = HTTPServer(('', serverPort), MyServer)

        try:
            webServer.serve_forever()
        except KeyboardInterrupt:
            pass

        webServer.server_close()
        print("Server stopped.")
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: reset-script
data:
  reset.py: |
    #!/usr/bin/env python3

    from http.server import BaseHTTPRequestHandler, HTTPServer
    import redis

    serverPort = 80
    r = redis.Redis( host='redis-0.redis', port=6379)

    class MyServer(BaseHTTPRequestHandler):
        def do_GET(self):
            r.set('count', 0)
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(bytes("<html><head><title>Requests counter</title></head>", "utf-8"))
            self.wfile.write(bytes("<p>Counter reset! </p>", "utf-8"))
            self.wfile.write(bytes("<body>", "utf-8"))
            self.wfile.write(bytes("</body></html>", "utf-8"))

    if __name__ == "__main__":
        webServer = HTTPServer(('', serverPort), MyServer)

        try:
            webServer.serve_forever()
        except KeyboardInterrupt:
            pass

        webServer.server_close()
        print("Server stopped.")
